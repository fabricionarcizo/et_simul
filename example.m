function example()
%  example  Shows examples of how to use the et_simul framework

%    Copyright 2008 Martin Böhme and the University of Lübeck
%
%    This file is part of et_simul.
%
%    et_simul is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License (version 3) as
%    published by the Free Software Foundation.
%
%    et_simul is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    (version 3) along with et_simul in a file called 'COPYING'. If not, see
%    <http://www.gnu.org/licenses/>.

    % Create an eye with a corneal radius of 7.98 mm looking out along the
    % negative y axis
    e=eye_make(7.98e-3, [1 0 0; 0 0 1; 0 1 0]);
    e.trans(1:3, 4)=[0 500e-3 200e-3]';

    % Create a light
    l=light_make();
    l.pos=[200e-3 0 0 1]';

    % Create a camera looking out along the positive y axis
    c=camera_make();
    c.trans(1:3,1:3)=[1 0 0; 0 0 -1; 0 1 0];

    % Draw a three-dimensional representation of the camera, light, and eye
    draw_scene(c, l, e);

    % Find the 3D position of the CR generated by the light
    cr=eye_find_cr(e, l, c);
    fprintf('CR is at (%g %g %g) in space\n', cr(1), cr(2), cr(3));

    % Project the CR to the camera's image plane
    cr_img=camera_project(c, cr);
    fprintf('CR is at (%g %g) in camera image\n', cr_img(1), cr_img(2));

    % Project again, but with a Gaussian camera error of 0.5 pixels
    c.err=0.5;
    c.err_type='gaussian';
    fprintf('\nWith 0.5 pixels of Gaussian camera error:\n');
    cr_img=camera_project(c, cr);
    fprintf('CR is at (%g %g) in camera image\n', cr_img(1), cr_img(2));

    % Draw a three-dimensional representation of the setup used by the
    % interpolation method
    fprintf('Press any key to show configuration for interpolation method\n');
    pause;
    clf;
    et_draw_setup(interpolate_make());

    % Test the interpolation method
    fprintf('Press any key to test interpolation method\n');
    pause;
    clf;
    interpolate_test();

    % Test the interpolation method again, but call test_over_screen directly
    fprintf('Press any key to test interpolation method again\n');
    pause;
    clf;
    test_over_screen(interpolate_make());
